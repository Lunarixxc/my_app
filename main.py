# main.py
import os
import re
import json
import hashlib
from datetime import datetime, timedelta
from typing import Optional, List, Dict
import pytz # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import httpx

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI(
    title="Personal Finance Bot",
    description="–¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –¥–Ω–µ–≤–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏ —É–º–Ω–æ–π –∫–æ–ø–∏–ª–∫–æ–π.",
    version="2.1.0"
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
GOOGLE_SHEET_ID = os.environ["GOOGLE_SHEET_ID"]
google_sa_json_str = os.environ["GOOGLE_SA_JSON"]
TG_SECRET_PATH = os.environ.get("TG_SECRET_PATH", "super-secret-path-123")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±—é–¥–∂–µ—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏ ---
MONTHLY_INCOME = 69600.0
MONTHLY_SAVINGS_GOAL = 20000.0
MONTHLY_SPEND_BUDGET = MONTHLY_INCOME - MONTHLY_SAVINGS_GOAL
AVG_DAYS_IN_MONTH = 30.4375
DAILY_SPEND_LIMIT = round(MONTHLY_SPEND_BUDGET / AVG_DAYS_IN_MONTH, 2)
MOSCOW_TZ = pytz.timezone('Europe/Moscow') # –£–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON ---
try:
    GOOGLE_SA_INFO = json.loads(google_sa_json_str)
except json.JSONDecodeError:
    import base64
    GOOGLE_SA_INFO = json.loads(base64.b64decode(google_sa_json_str))

# --- Google Sheets API ---
SHEETS_SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SHEET_NAME = "Transactions"
HEADER = ["id", "ts_utc", "ts_msk", "amount", "currency", "type", "description", "balance_after", "source_msg"]

def get_sheets_service():
    creds = Credentials.from_service_account_info(GOOGLE_SA_INFO, scopes=SHEETS_SCOPES)
    return build("sheets", "v4", credentials=creds)

def read_all_rows() -> List[List[str]]:
    try:
        service = get_sheets_service()
        result = service.spreadsheets().values().get(
            spreadsheetId=GOOGLE_SHEET_ID,
            range=f"{SHEET_NAME}!A:I"
        ).execute()
        return result.get("values", [])
    except HttpError:
        return []

def append_row(row: list):
    try:
        service = get_sheets_service()
        service.spreadsheets().values().append(
            spreadsheetId=GOOGLE_SHEET_ID,
            range=f"{SHEET_NAME}!A1",
            valueInputOption="USER_ENTERED",
            body={"values": [row]}
        ).execute()
    except HttpError as error:
        print(f"Error appending row: {error}")
        raise

# --- Telegram API ---
async def send_telegram(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(url, json=payload)
        except httpx.RequestError as e:
            print(f"Error sending to Telegram: {e}")

# --- –ü–∞—Ä—Å–µ—Ä –∏ —É—Ç–∏–ª–∏—Ç—ã ---
def make_id(body: str, ts: str) -> str:
    raw = f"{body}|{ts}".encode("utf-8")
    return hashlib.sha256(raw).hexdigest()[:16]

def parse_amount(text: str) -> Optional[float]:
    match = re.search(r"(\d{1,3}(?:[ \u00A0]\d{3})*(?:[.,]\d{1,2})?)\s*‚ÇΩ", text)
    if not match: return None
    value_str = match.group(1).replace(" ", "").replace("\u00A0", "").replace(",", ".")
    try:
        return float(value_str)
    except (ValueError, TypeError):
        return None

def parse_message(text: str) -> dict:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è."""
    data = {
        "type": "debit",
        "amount": parse_amount(text),
        "currency": "RUB",
        "description": "", # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        "balance_after": None,
    }
    
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ–±—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    patterns = [
        r"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ .*?, (.*?)(?=–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å|$)",
        r"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ .*?, (.*?)(?=–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å|$)",
        r"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ .*?\. (.*?)\.",
    ]
    for pattern in patterns:
        match = re.search(pattern, text, re.I)
        if match:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ
            data["description"] = match.group(1).strip().rstrip('.').strip()
            break # –ù–∞—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ fallback
    if not data["description"]:
        data["description"] = text.splitlines()[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è

    if re.search(r"–∑–∞—á–∏—Å–ª–µ–Ω|–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–≤–æ–∑–≤—Ä–∞—Ç|–∑–∞—Ä–ø–ª–∞—Ç–∞", text, re.I):
        data["type"] = "credit"
        
    match = re.search(r"(?:–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å)\s*([\d\s\u00A0,.]+)‚ÇΩ", text, re.I)
    if match:
        data["balance_after"] = parse_amount(match.group(1) + " ‚ÇΩ")

    return data

# --- –õ–æ–≥–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–ê) ---
def calculate_budget_stats(all_rows: List[List[str]]) -> dict:
    """–°—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—é–¥–∂–µ—Ç—É. –¢–µ–ø–µ—Ä—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–æ–ø–∏–ª–∫–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤ "—Å–µ–≥–æ–¥–Ω—è" –∏ "—ç—Ç–æ—Ç –º–µ—Å—è—Ü"
    now_msk = datetime.now(MOSCOW_TZ)
    today_start_msk = now_msk.replace(hour=0, minute=0, second=0, microsecond=0)
    
    spent_today = 0.0
    
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows

    if not data_rows: # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –∫–æ–ø–∏–ª–∫–∞ —Ä–∞–≤–Ω–∞ –Ω—É–ª—é
        return {
            "spent_today": 0.0,
            "daily_limit_left": DAILY_SPEND_LIMIT,
            "smart_piggy_bank": 0.0
        }

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É —Å–∞–º–æ–π –ø–µ—Ä–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ø–∏–ª–∫–∏
    first_transaction_ts_str = data_rows[0][2] # ts_msk
    first_transaction_date = datetime.fromisoformat(first_transaction_ts_str).date()
    
    # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã —Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞
    total_spent_since_start = 0.0
    for row in data_rows:
        try:
            ts_msk_str, amount_str, type_str = row[2], row[3], row[5]
            if type_str != "debit": continue
            
            ts_msk = datetime.fromisoformat(ts_msk_str)
            amount = float(amount_str)
            
            total_spent_since_start += amount

            if ts_msk >= today_start_msk:
                spent_today += amount

        except (ValueError, IndexError, TypeError):
            continue
            
    # –õ–æ–≥–∏–∫–∞ –∫–æ–ø–∏–ª–∫–∏: —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ —Å –ü–ï–†–í–û–ô —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞ –Ω–µ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    days_since_start = (now_msk.date() - first_transaction_date).days
    
    # –ë—é–¥–∂–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π "–≤—ã–¥–µ–ª–µ–Ω" –Ω–∞ –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–Ω–∏
    planned_spend_to_date = days_since_start * DAILY_SPEND_LIMIT
    
    # –ö–æ–ø–∏–ª–∫–∞ = (—Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å) - (—Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ)
    smart_piggy_bank = planned_spend_to_date - total_spent_since_start

    return {
        "spent_today": round(spent_today, 2),
        "daily_limit_left": round(DAILY_SPEND_LIMIT - spent_today, 2),
        "smart_piggy_bank": round(smart_piggy_bank, 2)
    }

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---
class IncomingSms(BaseModel):
    body: str
    time: Optional[str] = None

@app.post("/sms")
async def process_sms(payload: IncomingSms):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ UTC –∏ —Å—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ
    ts_utc_str = payload.time or datetime.utcnow().isoformat()
    ts_utc = datetime.fromisoformat(ts_utc_str.replace('Z', '+00:00'))
    ts_msk = ts_utc.astimezone(MOSCOW_TZ)
    
    msg_id = make_id(payload.body, ts_utc_str)

    all_rows = read_all_rows()
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows
    if any(msg_id == row[0] for row in data_rows if row):
        return {"status": "duplicate", "id": msg_id}

    parsed = parse_message(payload.body)
    if parsed.get("amount") is None:
        raise HTTPException(status_code=400, detail="Could not parse amount from message body.")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ–±–æ–∏–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
    new_row = [
        msg_id,
        ts_utc.isoformat(),
        ts_msk.isoformat(),
        parsed["amount"],
        parsed["currency"],
        parsed["type"],
        parsed["description"],
        parsed["balance_after"],
        payload.body.strip()
    ]
    if not all_rows:
        append_row(HEADER)
    append_row(new_row)

    if parsed["type"] == "debit":
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
        stats = calculate_budget_stats(data_rows + [new_row])
        
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        
        emoji_status = "‚úÖ" if limit_left >= 0 else "‚ö†Ô∏è"
        
        text = (
            f"<b>–†–∞—Å—Ö–æ–¥: {parsed['amount']} {parsed['currency']}</b> ({parsed['description']})\n\n"
            f"{emoji_status} –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n"
            f"üê∑ –ö–æ–ø–∏–ª–∫–∞ –º–µ—Å—è—Ü–∞: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã: {parsed['balance_after'] or 'N/A'} ‚ÇΩ"
        )
        await send_telegram(text)

    return {"status": "ok", "id": msg_id}

# ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Å Telegram Webhook –∏ read_root –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã)

@app.post(f"/telegram/webhook/{TG_SECRET_PATH}", include_in_schema=False)
async def tg_webhook(update: Dict):
    message = update.get("message") or update.get("edited_message")
    if not message or str(message.get("chat", {}).get("id")) != TELEGRAM_CHAT_ID:
        return {"ok": True}

    text = message.get("text", "").strip().lower()
    
    if text in ("/start", "/help"):
        await send_telegram(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –¥–µ–Ω—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏.\n"
            f"–¢–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: <b>{DAILY_SPEND_LIMIT} ‚ÇΩ</b>"
        )
    elif text == "/status":
        all_rows = read_all_rows()
        stats = calculate_budget_stats(all_rows)
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        
        report = (
            f"<b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {DAILY_SPEND_LIMIT} ‚ÇΩ\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['spent_today']} ‚ÇΩ\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n\n"
            f"üê∑ –ö–æ–ø–∏–ª–∫–∞ –º–µ—Å—è—Ü–∞: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"<i>(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞, –µ—Å–ª–∏ —Ç—Ä–∞—Ç–∏—à—å –º–µ–Ω—å—à–µ –ø–ª–∞–Ω–∞)</i>"
        )
        await send_telegram(report)
        
    return {"ok": True}

@app.get("/", summary="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
def read_root():
    return {"status": "ok", "version": "2.1.0"}
