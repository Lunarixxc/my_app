# main.py
import os
import re
import json
import hashlib
from datetime import datetime, timedelta, timezone
from typing import Optional, List, Dict

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import httpx

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI(
    title="Personal Finance Bot",
    description="–¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –¥–Ω–µ–≤–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏ —É–º–Ω–æ–π –∫–æ–ø–∏–ª–∫–æ–π.",
    version="2.0.0"
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
GOOGLE_SHEET_ID = os.environ["GOOGLE_SHEET_ID"]
google_sa_json_str = os.environ["GOOGLE_SA_JSON"]
TG_SECRET_PATH = os.environ.get("TG_SECRET_PATH", "super-secret-path-123")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –±—é–¥–∂–µ—Ç–∞ ---
MONTHLY_INCOME = 69600.0
MONTHLY_SAVINGS_GOAL = 20000.0
MONTHLY_SPEND_BUDGET = MONTHLY_INCOME - MONTHLY_SAVINGS_GOAL
AVG_DAYS_IN_MONTH = 30.4375 # –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ
DAILY_SPEND_LIMIT = round(MONTHLY_SPEND_BUDGET / AVG_DAYS_IN_MONTH, 2) # ~1630 ‚ÇΩ

# --- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ JSON –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
try:
    GOOGLE_SA_INFO = json.loads(google_sa_json_str)
except json.JSONDecodeError:
    import base64
    GOOGLE_SA_INFO = json.loads(base64.b64decode(google_sa_json_str))

# --- Google Sheets API ---
SHEETS_SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SHEET_NAME = "Transactions"
HEADER = ["id", "ts", "amount", "currency", "type", "description", "balance_after", "source_msg"]

def get_sheets_service():
    creds = Credentials.from_service_account_info(GOOGLE_SA_INFO, scopes=SHEETS_SCOPES)
    return build("sheets", "v4", credentials=creds)

def read_all_rows() -> List[List[str]]:
    try:
        service = get_sheets_service()
        result = service.spreadsheets().values().get(
            spreadsheetId=GOOGLE_SHEET_ID,
            range=f"{SHEET_NAME}!A:H"
        ).execute()
        return result.get("values", [])
    except HttpError:
        return []

def append_row(row: list):
    try:
        service = get_sheets_service()
        service.spreadsheets().values().append(
            spreadsheetId=GOOGLE_SHEET_ID,
            range=f"{SHEET_NAME}!A1",
            valueInputOption="USER_ENTERED",
            body={"values": [row]}
        ).execute()
    except HttpError as error:
        print(f"Error appending row: {error}")
        raise HTTPException(status_code=500, detail="Failed to write to Google Sheet.")

# --- Telegram API ---
async def send_telegram(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    async with httpx.AsyncClient(timeout=10) as client:
        try:
            await client.post(url, json=payload)
        except httpx.RequestError as e:
            print(f"Error sending to Telegram: {e}")

# --- –ü–∞—Ä—Å–µ—Ä –∏ —É—Ç–∏–ª–∏—Ç—ã ---
def make_id(body: str, ts: str) -> str:
    raw = f"{body}|{ts}".encode("utf-8")
    return hashlib.sha256(raw).hexdigest()[:16]

def parse_amount(text: str) -> Optional[float]:
    # –ò—â–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ (–ø—Ä–æ–±–µ–ª, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª) –∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –∫–æ–ø–µ–π–∫–∞–º–∏ (—á–µ—Ä–µ–∑ —Ç–æ—á–∫—É –∏–ª–∏ –∑–∞–ø—è—Ç—É—é)
    match = re.search(r"(\d{1,3}(?:[ \u00A0]\d{3})*(?:[.,]\d{1,2})?)\s*‚ÇΩ", text)
    if not match:
        return None
    value_str = match.group(1).replace(" ", "").replace("\u00A0", "").replace(",", ".")
    try:
        return float(value_str)
    except (ValueError, TypeError):
        return None

def parse_message(text: str) -> dict:
    data = {
        "type": "debit", # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥–æ–º
        "amount": parse_amount(text),
        "currency": "RUB",
        "description": "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
        "balance_after": None,
    }

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
    if re.search(r"–∑–∞—á–∏—Å–ª–µ–Ω|–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–≤–æ–∑–≤—Ä–∞—Ç|–∑–∞—Ä–ø–ª–∞—Ç–∞", text, re.I):
        data["type"] = "credit"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    # –í–∞—Ä–∏–∞–Ω—Ç 1: –ü–æ–∫—É–ø–∫–∞ –Ω–∞ X, [–æ–ø–∏—Å–∞–Ω–∏–µ]
    match = re.search(r"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ .*?, (.*)", text, re.I)
    if match:
        data["description"] = match.group(1).strip()
    
    # –í–∞—Ä–∏–∞–Ω—Ç 2: –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü ... [–æ–ø–∏—Å–∞–Ω–∏–µ]
    match = re.search(r"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ .*?, (.*)", text, re.I)
    if match:
        data["description"] = f"–°–ë–ü: {match.group(1).strip()}"
        
    # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ X. [–ò–º—è]
    match = re.search(r"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ .*?\. (.*?)\.", text, re.I)
    if match:
        data["description"] = f"–ü–µ—Ä–µ–≤–æ–¥: {match.group(1).strip()}"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–ª–∞–Ω—Å
    match = re.search(r"(?:–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å)\s*([\d\s\u00A0,.]+)‚ÇΩ", text, re.I)
    if match:
        data["balance_after"] = parse_amount(match.group(1) + " ‚ÇΩ") # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É–±–ª—å –¥–ª—è —É–Ω–∏—Ñ–∏–∫–∞—Ü–∏–∏

    return data


# --- –õ–æ–≥–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞ ---
def calculate_budget_stats(all_rows: List[List[str]]) -> dict:
    """–°—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—é–¥–∂–µ—Ç—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –º–µ—Å—è—Ü."""
    now = datetime.now(timezone.utc)
    today_start = now.replace(hour=0, minute=0, second=0, microsecond=0)
    month_start = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

    spent_today = 0.0
    spent_this_month = 0.0
    
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows

    for row in data_rows:
        try:
            ts_str, amount_str, type_str = row[1], row[2], row[4]
            if type_str != "debit": continue # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ö–æ–¥—ã
            
            ts = datetime.fromisoformat(ts_str)
            amount = float(amount_str)

            if ts >= today_start:
                spent_today += amount
            
            if ts >= month_start:
                spent_this_month += amount
        except (ValueError, IndexError, TypeError):
            continue
            
    # –†–∞—Å—á–µ—Ç "—É–º–Ω–æ–π –∫–æ–ø–∏–ª–∫–∏"
    days_passed_in_month = (now - month_start).days
    planned_spend_to_date = days_passed_in_month * DAILY_SPEND_LIMIT
    smart_piggy_bank = planned_spend_to_date - spent_this_month

    return {
        "spent_today": round(spent_today, 2),
        "daily_limit_left": round(DAILY_SPEND_LIMIT - spent_today, 2),
        "smart_piggy_bank": round(smart_piggy_bank, 2)
    }


# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

class IncomingSms(BaseModel):
    body: str
    time: Optional[str] = None

@app.post("/sms", summary="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
async def process_sms(payload: IncomingSms):
    # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é, –∫–∞–∫ —Ç—ã –∏ –ø—Ä–æ—Å–∏–ª
    ts = payload.time or datetime.now(timezone.utc).isoformat()
    msg_id = make_id(payload.body, ts)

    all_rows = read_all_rows()
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows
    existing_ids = {row[0] for row in data_rows if row}
    if msg_id in existing_ids:
        return {"status": "duplicate", "id": msg_id}

    parsed = parse_message(payload.body)
    if parsed.get("amount") is None:
        raise HTTPException(status_code=400, detail="Could not parse amount from message body.")

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
    new_row = [
        msg_id, ts, parsed["amount"], parsed["currency"],
        parsed["type"], parsed["description"],
        parsed["balance_after"], payload.body.strip()
    ]
    if not all_rows:
        append_row(HEADER)
    append_row(new_row)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö
    if parsed["type"] == "debit":
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤–∫–ª—é—á–∞—è —Ç–æ–ª—å–∫–æ —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        stats = calculate_budget_stats(all_rows + [new_row])
        
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        
        emoji_status = "‚úÖ" if limit_left >= 0 else "‚ö†Ô∏è"
        
        text = (
            f"<b>–†–∞—Å—Ö–æ–¥: {parsed['amount']} {parsed['currency']}</b> ({parsed['description']})\n\n"
            f"{emoji_status} –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n"
            f"üê∑ –ö–æ–ø–∏–ª–∫–∞ –º–µ—Å—è—Ü–∞: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã: {parsed['balance_after'] or 'N/A'} ‚ÇΩ"
        )
        await send_telegram(text)

    return {"status": "ok", "id": msg_id}


@app.post(f"/telegram/webhook/{TG_SECRET_PATH}", include_in_schema=False)
async def tg_webhook(update: Dict):
    message = update.get("message") or update.get("edited_message")
    if not message or str(message.get("chat", {}).get("id")) != TELEGRAM_CHAT_ID:
        return {"ok": True}

    text = message.get("text", "").strip().lower()
    
    if text in ("/start", "/help"):
        await send_telegram(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –¥–µ–Ω—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏.\n"
            f"–¢–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: <b>{DAILY_SPEND_LIMIT} ‚ÇΩ</b>"
        )
    elif text == "/status":
        all_rows = read_all_rows()
        stats = calculate_budget_stats(all_rows)
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        
        report = (
            f"<b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {DAILY_SPEND_LIMIT} ‚ÇΩ\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['spent_today']} ‚ÇΩ\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n\n"
            f"üê∑ –ö–æ–ø–∏–ª–∫–∞ –º–µ—Å—è—Ü–∞: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"<i>(–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞, –µ—Å–ª–∏ —Ç—Ä–∞—Ç–∏—à—å –º–µ–Ω—å—à–µ –ø–ª–∞–Ω–∞)</i>"
        )
        await send_telegram(report)
        
    return {"ok": True}

@app.get("/", summary="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
def read_root():
    return {"status": "ok", "version": "2.0.0"}
