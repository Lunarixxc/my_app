# main.py
import os
import re
import json
import hashlib
from datetime import datetime, timedelta
from typing import Optional, List, Dict
from collections import defaultdict
import pytz

from fastapi import FastAPI, Request, HTTPException
from pydantic import BaseModel
import httpx

from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
app = FastAPI(
    title="Personal Finance Bot",
    description="–¢—Ä–µ–∫–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å –¥–Ω–µ–≤–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º –∏ —É–º–Ω–æ–π –∫–æ–ø–∏–ª–∫–æ–π.",
    version="2.3.0"
)

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
TELEGRAM_BOT_TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
TELEGRAM_CHAT_ID = os.environ["TELEGRAM_CHAT_ID"]
GOOGLE_SHEET_ID = os.environ["GOOGLE_SHEET_ID"]
google_sa_json_str = os.environ["GOOGLE_SA_JSON"]
TG_SECRET_PATH = os.environ.get("TG_SECRET_PATH", "super-secret-path-123")

MONTHLY_INCOME = 69600.0
MONTHLY_SAVINGS_GOAL = 20000.0
MONTHLY_SPEND_BUDGET = MONTHLY_INCOME - MONTHLY_SAVINGS_GOAL
AVG_DAYS_IN_MONTH = 30.4375
DAILY_SPEND_LIMIT = round(MONTHLY_SPEND_BUDGET / AVG_DAYS_IN_MONTH, 2)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# --- Google Sheets –∏ –ø—Ä–æ—á–µ–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# ... (–≤–µ—Å—å –∫–æ–¥ –¥–æ `calculate_budget_stats` –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ, –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ 2.2)
try:
    GOOGLE_SA_INFO = json.loads(google_sa_json_str)
except json.JSONDecodeError:
    import base64
    GOOGLE_SA_INFO = json.loads(base64.b64decode(google_sa_json_str))
SHEETS_SCOPES = ["https://www.googleapis.com/auth/spreadsheets"]
SHEET_NAME = "Transactions"
HEADER = ["id", "ts_utc", "ts_msk", "amount", "currency", "type", "description", "balance_after", "source_msg"]
def get_sheets_service():
    creds = Credentials.from_service_account_info(GOOGLE_SA_INFO, scopes=SHEETS_SCOPES)
    return build("sheets", "v4", credentials=creds)
def read_all_rows():
    try:
        service = get_sheets_service()
        result = service.spreadsheets().values().get(spreadsheetId=GOOGLE_SHEET_ID, range=f"{SHEET_NAME}!A:I").execute()
        return result.get("values", [])
    except HttpError: return []
def append_row(row: list):
    try:
        service = get_sheets_service()
        service.spreadsheets().values().append(spreadsheetId=GOOGLE_SHEET_ID, range=f"{SHEET_NAME}!A1", valueInputOption="USER_ENTERED", body={"values": [row]}).execute()
    except HttpError as error:
        print(f"Error appending row: {error}"); raise
async def send_telegram(text: str):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"; payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text, "parse_mode": "HTML"}
    async with httpx.AsyncClient(timeout=10) as client:
        try: await client.post(url, json=payload)
        except httpx.RequestError as e: print(f"Error sending to Telegram: {e}")
def make_id(body: str, ts: str): raw = f"{body}|{ts}".encode("utf-8"); return hashlib.sha256(raw).hexdigest()[:16]
def parse_amount(text: str):
    match = re.search(r"(\d{1,3}(?:[ \u00A0]\d{3})*(?:[.,]\d{1,2})?)\s*‚ÇΩ", text)
    if not match: return None
    value_str = match.group(1).replace(" ", "").replace("\u00A0", "").replace(",", ".");
    try: return float(value_str)
    except (ValueError, TypeError): return None
def parse_message(text: str):
    data = {"type": "debit", "amount": parse_amount(text), "currency": "RUB", "description": "", "balance_after": None}
    patterns = [r"–ü–æ–∫—É–ø–∫–∞ –Ω–∞ .*?, (.*?)(?=–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å|$)", r"–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü –Ω–∞ .*?, (.*?)(?=–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å|$)", r"–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ .*?\. (.*?)\."]
    for pattern in patterns:
        match = re.search(pattern, text, re.I)
        if match: data["description"] = match.group(1).strip().rstrip('.').strip(); break
    if not data["description"]: data["description"] = text.splitlines()[0]
    if re.search(r"–∑–∞—á–∏—Å–ª–µ–Ω|–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–≤–æ–∑–≤—Ä–∞—Ç|–∑–∞—Ä–ø–ª–∞—Ç–∞", text, re.I): data["type"] = "credit"
    match = re.search(r"(?:–î–æ—Å—Ç—É–ø–Ω–æ|–ë–∞–ª–∞–Ω—Å)\s*([\d\s\u00A0,.]+)‚ÇΩ", text, re.I)
    if match: data["balance_after"] = parse_amount(match.group(1) + " ‚ÇΩ")
    return data
def parse_flexible_time(time_str: str):
    time_str = time_str.replace('\u202f', ' ')
    try: dt_obj = datetime.strptime(f"{datetime.now().year} {time_str}", '%Y %d.%m, %I:%M %p'); localized_dt = MOSCOW_TZ.localize(dt_obj); return localized_dt.astimezone(pytz.UTC)
    except ValueError: pass
    try: return datetime.fromisoformat(time_str.replace('Z', '+00:00'))
    except ValueError: pass
    return datetime.now(pytz.UTC)

# --- –õ–æ–≥–∏–∫–∞ –±—é–¥–∂–µ—Ç–∞ (–ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ê) ---
def calculate_budget_stats(all_rows: List[List[str]]) -> dict:
    """
    –°—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—é–¥–∂–µ—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∫–æ–ø–∏–ª–∫–∏.
    –ö–æ–ø–∏–ª–∫–∞ - —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ü–†–û–®–ï–î–®–ò–• –¥–Ω–µ–π.
    –¢—Ä–∞—Ç—ã —Å–µ–≥–æ–¥–Ω—è –≤–ª–∏—è—é—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –°–ï–ì–û–î–ù–Ø.
    """
    now_msk = datetime.now(MOSCOW_TZ)
    today_date = now_msk.date()
    
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–∞—Ç—ã –ø–æ –¥–Ω—è–º
    daily_spends = defaultdict(float)
    for row in data_rows:
        try:
            ts_msk_str, amount_str, type_str = row[2], row[3], row[5]
            if type_str != "debit":
                continue
            
            ts_msk = datetime.fromisoformat(ts_msk_str)
            amount = float(amount_str)
            
            daily_spends[ts_msk.date()] += amount
        except (ValueError, IndexError, TypeError):
            continue

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ø–∏–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ü–†–û–®–ï–î–®–ò–• –¥–Ω–µ–π
    smart_piggy_bank = 0.0
    for day, total_spent in daily_spends.items():
        if day < today_date:
            # –°—á–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–Ω—è: —Å—ç–∫–æ–Ω–æ–º–∏–ª (+) –∏–ª–∏ –ø–µ—Ä–µ—Ç—Ä–∞—Ç–∏–ª (-)
            day_result = DAILY_SPEND_LIMIT - total_spent
            smart_piggy_bank += day_result
            
    # –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è –±–µ—Ä–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    spent_today = daily_spends.get(today_date, 0.0)
    
    # –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–∏–º–∏—Ç –º–∏–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Ç—Ä–∞—Ç—ã
    daily_limit_left = DAILY_SPEND_LIMIT - spent_today

    return {
        "spent_today": round(spent_today, 2),
        "daily_limit_left": round(daily_limit_left, 2),
        "smart_piggy_bank": round(smart_piggy_bank, 2)
    }

# --- –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class IncomingSms(BaseModel):
    body: str
    time: Optional[str] = None

@app.post("/sms")
async def process_sms(payload: IncomingSms):
    ts_str = payload.time if payload.time else datetime.now(pytz.UTC).isoformat()
    ts_utc = parse_flexible_time(ts_str)
    ts_msk = ts_utc.astimezone(MOSCOW_TZ)
    
    msg_id = make_id(payload.body, ts_utc.isoformat())

    all_rows = read_all_rows()
    data_rows = all_rows[1:] if all_rows and all_rows[0] == HEADER else all_rows
    if any(msg_id == row[0] for row in data_rows if row):
        return {"status": "duplicate", "id": msg_id}

    parsed = parse_message(payload.body)
    if parsed.get("amount") is None:
        raise HTTPException(status_code=400, detail="Could not parse amount from message body.")

    new_row = [msg_id, ts_utc.isoformat(), ts_msk.isoformat(), parsed["amount"], parsed["currency"], "debit", parsed["description"], parsed["balance_after"], payload.body.strip()]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ü–ï–†–ï–î —Ä–∞—Å—á–µ—Ç–æ–º, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∞–∫—Ç—É–∞–ª—å–Ω—ã–º
    if not all_rows:
        append_row(HEADER)
        all_rows.append(HEADER) # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
    
    append_row(new_row)
    data_rows.append(new_row) # –ò –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä

    if parsed["type"] == "debit":
        stats = calculate_budget_stats(data_rows)
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        
        # –û–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç—Ä–∞—Ç = –æ—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è + –∫–æ–ø–∏–ª–∫–∞
        total_available = limit_left + piggy_bank
        emoji_status = "‚úÖ" if total_available >= 0 else "üÜò"
        
        text = (
            f"<b>–†–∞—Å—Ö–æ–¥: {parsed['amount']} {parsed['currency']}</b> ({parsed['description']})\n\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n"
            f"üê∑ –í –∫–æ–ø–∏–ª–∫–µ: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"<b>{emoji_status} –ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {total_available:+.2f} ‚ÇΩ</b>"
        )
        await send_telegram(text)

    return {"status": "ok", "id": msg_id}

@app.post(f"/telegram/webhook/{TG_SECRET_PATH}", include_in_schema=False)
async def tg_webhook(update: Dict):
    message = update.get("message") or update.get("edited_message")
    if not message or str(message.get("chat", {}).get("id")) != TELEGRAM_CHAT_ID:
        return {"ok": True}

    text = message.get("text", "").strip().lower()
    
    if text in ("/start", "/help"):
        await send_telegram(
            "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç.\n"
            "–Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∏ –¥–Ω–µ–≤–Ω–æ–π –±—é–¥–∂–µ—Ç.\n\n"
            "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/status - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç –Ω–∞ –¥–µ–Ω—å –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–ø–∏–ª–∫–∏.\n"
            f"–¢–≤–æ–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: <b>{DAILY_SPEND_LIMIT} ‚ÇΩ</b>"
        )
    elif text == "/status":
        all_rows = read_all_rows()
        stats = calculate_budget_stats(all_rows)
        limit_left = stats['daily_limit_left']
        piggy_bank = stats['smart_piggy_bank']
        total_available = limit_left + piggy_bank
        
        report = (
            f"<b>–°—Ç–∞—Ç—É—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
            f"–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {DAILY_SPEND_LIMIT} ‚ÇΩ\n"
            f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {stats['spent_today']} ‚ÇΩ\n"
            f"–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: <b>{limit_left:+.2f} ‚ÇΩ</b>\n\n"
            f"üê∑ –í –∫–æ–ø–∏–ª–∫–µ: <code>{piggy_bank:+.2f} ‚ÇΩ</code>\n"
            f"<b>–ò—Ç–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç—Ä–∞—Ç: {total_available:+.2f} ‚ÇΩ</b>"
        )
        await send_telegram(report)
        
    return {"ok": True}

@app.get("/", summary="–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
def read_root():
    return {"status": "ok", "version": "2.3.0"}
